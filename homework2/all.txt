/******************* "src\web\ExamGradeServlet.java" ********************/

package web;

import tools.AnsProcess;
import tools.SaveAndLoad;
import tools.Student;
import tools.HTML;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;

import java.io.IOException;
import java.io.PrintWriter;

/*
 * 判题，出分
 */
@WebServlet("/check")
public class ExamGradeServlet extends HttpServlet {
    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("utf-8");
        response.setContentType("text/html;charset=UTF-8");
        var ans = request.getParameterMap();
        PrintWriter out = response.getWriter();
        var stu = new Student(ans.get("name")[0], ans.get("num")[0],
                4 * AnsProcess.correctNumbers(ans, SaveAndLoad.load()));
        Student.students.remove(stu);
        Student.students.add(stu);
        String body = "<h1>考试成绩</h1>学号:%s<br>姓名:%s<br>成绩:%d<br><a href=index.html>返回主页</a>".formatted(stu.num, stu.name,
                stu.grade);
        body = HTML.div(body, "box", "", "margin:20% 33% auto;padding:20%;width:30%;");
        out.println(HTML.html("成绩", body));
    }
}
/******************* "src\web\GradeTable.java" ********************/

package web;

import tools.Student;
import tools.HTML;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/*
 * 学生成绩表
 */
@WebServlet("/grade_table")
public class GradeTable extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setContentType("text/html;charset=UTF-8");
        var out = resp.getWriter();
        List<Object[]> table = new ArrayList<>();
        Student.students.forEach(stu -> table.add(stu.toArray()));
        out.println(HTML.html("成绩总表", HTML.div("<h1 style='border-bottom: #89898966 solid 1px;'>成绩总表</h1>" +
                HTML.toTable(new Object[] { "学号", "姓名", "成绩" }, table, ""), "box", "",
                "margin-top:10%;text-align:center;padding:20%;width:90%;background-color:rgba(20, 21, 22, 0.8);color:white;")));
    }
}

/******************* "src\web\Login.java" ********************/

package web;

import tools.HTML;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/*
 * 两个登录界面的基
 */
class Login extends HttpServlet {
    String url;

    protected Login(String url) {
        super();
        this.url = url;
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (request.getParameter("username").equals("admin") && request.getParameter("password").equals("admin")) {
            response.sendRedirect(url);
        } else {
            response.setContentType("text/html;charset=UTF-8");
            PrintWriter out = response.getWriter();
            out.println(HTML.html("登录失败",
                    HTML.div("<h1>登录失败</h1><p>登录失败，点击<a href='index.html'>返回主页<a></p>", "box", "",
                            "width:50%;height:50%;margin:0 auto;margin-top:10%")));
        }
    }
}

/******************* "src\web\LoginBeforeSave.java" ********************/

package web;

import javax.servlet.annotation.WebServlet;

@WebServlet("/login_save")
public class LoginBeforeSave extends Login {
    public LoginBeforeSave() {
        super("save.html");
    }
}

/******************* "src\web\LoginBeforeTable.java" ********************/

package web;

import javax.servlet.annotation.WebServlet;

@WebServlet("/login_grade")
public class LoginBeforeTable extends Login {
    public LoginBeforeTable() {
        super("grade_table");
    }
}

/******************* "src\web\SaveServlet.java" ********************/

package web;

import tools.SaveAndLoad;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/*
 * 保存
 */
@WebServlet("/save")
public class SaveServlet extends HttpServlet {
    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("utf-8");
        response.setContentType("text/html;charset=UTF-8");
        var ans = request.getParameterMap();
        PrintWriter out = response.getWriter();
        out.println("<body>");
        out.println((SaveAndLoad.save(ans) ? "保存成功" : "保存失败") + "<br>3秒后跳转回主页");
        out.println("<script>\nfunction jump(){window.location.href='index.html';}\nsetTimeout(jump,3000);\n</script>");
        out.println("</body>");
    }
}

/******************* "src\tools\AnsProcess.java" ********************/

package tools;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

/*
 * 处理答案输入，包括录入的答案和学生的回答
 */
public class AnsProcess {
    static String modify(String s) {
        return s.replaceAll(" ", "")
                .replaceAll("\r", "")
                .replaceAll("\n", "")
                .replaceAll("\t", "");
    }

    /*
     * 两集合相等
     */
    public static boolean setEquals(Set<String> set1, Set<String> set2) {
        if (set1 == null || set2 == null)
            return false;
        if (set1.size() != set2.size())
            return false;
        return set1.containsAll(set2);
    }

    public static Map<String, Object> modifyBeforeSave(Map<String, String[]> mp) {
        Map<String, Object> ans = new HashMap<>();
        mp.forEach((key, val) -> {
            var kind = key.split("_")[0];
            switch (kind) {
                case "single-section", "judgement" -> ans.put(key, val[0]);
                case "multi-section" -> ans.put(key, new HashSet<>(Arrays.asList(val)));
                case "blank" -> ans.put(key, modify(val[0]));
                case "quiz" -> ans.put(key, modify(val[0]).split(";"));
            }
        });
        return ans;
    }

    /// 做对的题数
    public static int correctNumbers(Map<String, String[]> mp, Map<String, Object> ans) {
        AtomicInteger ret = new AtomicInteger();
        for (Map.Entry<String, String[]> entry : mp.entrySet()) {
            String key = entry.getKey();
            String[] val = entry.getValue();
            var kind = key.split("_")[0];
            switch (kind) {
                case "single-section", "judgement" -> {
                    if (ans.get(key).equals(val[0])) {
                        ret.addAndGet(1);
                        // System.out.println(key);
                    }
                }
                case "multi-section" -> {
                    if (setEquals(new HashSet<>(Arrays.asList(val)), (Set<String>) ans.get(key))) {
                        ret.addAndGet(1);
                        // System.out.println(key);
                    }
                }
                case "blank" -> {
                    if (ans.get(key).equals(modify(val[0]))) {
                        ret.addAndGet(1);
                        // System.out.println(key);
                    }
                }
                case "quiz" -> {
                    int flag = 1;
                    for (String keyword : (String[]) ans.get(key)) {
                        if (!val[0].contains(keyword)) {
                            flag = 0;
                            break;
                        }
                    }
                    if (flag == 1) {
                        // System.out.println(key);
                    }
                    ret.addAndGet(flag);
                }
            }
        }
        return ret.get();
    }
}

/******************* "src\tools\HTML.java" ********************/

package tools;

import java.util.List;

/*工具包，主要用于快速生成html字符串 */
public class HTML {
    private static String toRows(List<Object[]> lst) {
        StringBuilder ret = new StringBuilder();
        for (Object[] row : lst) {
            ret.append("<tr>");
            for (Object obj : row) {
                ret.append("<td>").append(obj.toString()).append("</td>");
            }
            ret.append("</tr>");
        }
        ret.append("</table>");
        return ret.toString();
    }

    static public String toTable(Object[] head, List<Object[]> lst, String class_) {
        StringBuilder ret = new StringBuilder("<table class='" + class_ + "' style='margin:auto;width:100%;'>");
        ret.append("<tr>");
        for (Object obj : head) {
            ret.append("<th>").append(obj.toString()).append("</th>");
        }
        ret.append("</tr>");
        return ret + toRows(lst);
    }

    static public String toTable(List<Object[]> lst, String class_) {
        String ret = "<table class='" + class_ + "'>";
        return ret + toRows(lst);
    }

    static public String html(String title, String body) {
        return String.format(
                "<html><head><link rel='stylesheet' type='text/css' href='css.css'><title>%s</title></head><body>%s</body></html>",
                title, body);
    }

    static public String div(String content, String class_, String id, String style) {
        return String.format("<div class='%s' id='%s' style='%s'>%s</div>", class_, id, style, content);
    }
}
/******************* "src\tools\SaveAndLoad.java" ********************/

package tools;

import java.io.*;
import java.util.Map;

/*
 * 录入答案的保存与载入
 */
public class SaveAndLoad {
    public static boolean save(Map<String, String[]> e) {
        try {
            FileOutputStream fileOut = new FileOutputStream("ans.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(AnsProcess.modifyBeforeSave(e));
            out.close();
            fileOut.close();
            return true;
        } catch (IOException i) {
            return false;
        }
    }

    public static Map<String, Object> load() {
        try {
            FileInputStream fileIn = new FileInputStream("ans.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            Map<String, Object> e = (Map<String, Object>) in.readObject();
            in.close();
            fileIn.close();
            return e;
        } catch (Exception e) {
            return null;
        }
    }
}

/******************* "src\tools\Student.java" ********************/

package tools;

import java.util.HashSet;
import java.util.Objects;

/*
 * 学生的数据结构，基于名字和学号具有唯一性
 */
public class Student {
    public static HashSet<Student> students = new HashSet<>();
    public String name;
    public String num;
    public int grade;

    public Student(String name, String num, int grade) {
        this.name = name;
        this.num = num;
        this.grade = grade;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        Student student = (Student) o;
        return name.equals(student.name) && num.equals(student.num);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, num);
    }

    public Object[] toArray() {
        return new Object[] { num, name, String.valueOf(grade) };
    }
}

/******************* "web\css.css" ********************/

body {
    font-family: 'JetBrains Mono', "Hiragino Sans GB", Simsun, "Microsoft Yahei", Arial, sans-serif;
    margin: 0;
    background-image: url(https://ak.hypergryph.com/assets/index/images/ak/pc/bk.jpg);
    background-attachment: fixed;
    font-size: 18px;
}

h1,
h2 {
    font-family: SimHei;
}

div.header {
    text-align: center;
    margin: 0 auto;
    width: 100%;
    position: absolute;
    top: 0%;
    left: 0%;
    height: 7%;
    margin-top: 5%;
    margin-bottom: 3%;
}

img.logo {
    height: 60px;
    width: 60px;
    padding-bottom: -10px;
    vertical-align: -15px;
}

@font-face {
    font-family: 'JetBrains Mono';
    src: local('JetBrains Mono'), url('https://what-is-me.github.io/font/JetBrainsMono-Regular.woff2') format('woff2');
}

@font-face {
    font-family: 'Pfeffer Mediæval';
    src: local('Pfeffer Mediæval'), url('https://what-is-me.github.io/font/PfefferMediaeval.otf') format('otf');
}


div.box {
    display: block;
    border-radius: 10px;
    border: 1px #ddd solid;
    background-color: #fff;
    padding: 20px 26px !important;
    margin: 0 auto;
}

input[type=text],
input[type=number],
input[type=tel],
input[type=password],
input[type=date],
input[type=email],
input[type=search],
textarea,
select {
    background-color: #fff;
    height: 24px;
    padding: 3px 7px;
    line-height: normal;
    border: 1px solid #a6a6a6;
    border-top-color: #949494;
    border-radius: 3px;
    box-shadow: 0 1px 0 rgb(255 255 255 / 50%), 0 1px 0 rgb(0 0 0 / 7%) inset;
    margin: 0 auto;
    font-size: 16px;
    vertical-align: middle;
    width: 100%;
}

label {
    display: block;
    padding-left: 2px;
    padding-bottom: 2px;
    font-weight: 700;
    font-family: SimHei, "黑体";
}

input[type=radio],
input[type=checkbox] {
    display: inline-block;
    height: 16px;
    width: 16px;
    border: 1px solid #000;
    overflow: hidden;
    vertical-align: -13px;
    text-align: center;
    -webkit-appearance: none;
    font: normal normal normal 14px/1 FontAwesome;
    outline: 0;
}

input[type=radio]:checked:after,
input[type=checkbox]:checked:after {
    content: '\221A';
    font-size: 15px;
    text-align: center;
    line-height: 17px;
    color: #000;
}

.submit-button {
    text-align: center;
    width: 100%;
    height: 30px;
    background-color: #66ccff;
    color: #000;
    border-width: 0;
    border-radius: 5px;
}

input[type=text],
input[type=number],
input[type=tel],
input[type=password],
input[type=date],
input[type=email],
input[type=search],
select,
textarea,
.submit-button,
input[type=radio],
input[type=checkbox],
label {
    box-sizing: border-box;
    margin-top: 10px;
    margin-bottom: 10px;
}

time {
    font-family: BenderLight;
}

code,
pre {
    font-family: "JetBrains Mono";
}

code {
    margin: 0 !important;
    background-color: rgba(255, 255, 255, 0.1);
    padding: 0 3px !important;
}

pre {
    margin: 6px 0;
    background-color: transparent;
}

table {
    font-size: 20px;
    border: 0;
    border-collapse: collapse;
}

table th {
    border: #2bf solid 1px;
    color: #222222;
    background-color: #cfcfcf;
    padding: 0 10px;
}

table td {
    padding: 0px 8px;
    border: #2bf solid 1px;
    color: #c4c4c4;
}

table td:hover {
    background-color: rgba(34, 187, 255, 0.5);
}

html,
body {
    height: 100%;
    cursor: url(https://what-is-me.github.io/cursor-inner.png) 3 3, default;
    position: static;
}
/******************* "web\exam.html" ********************/

<!DOCTYPE html>

<head>
    <meta charset="UTF-8">
    <title>试题页面</title>
    <link rel='stylesheet' type='text/css' href='css.css'>
    <style>
        .form {
            background: white;
            margin: 5% auto 0;
            width: 70%;
            padding: 5%;
            border-radius: 10px;
        }
    </style>

</head>

<body>
    <div class="form">
        <div id="grade"></div>
        <form name="exam" id="form" action="check" method="post">
            <div class="info" style="margin: 0 auto;text-align: center;">
                <h1>政治考试</h1>
                <label style="display:inline;">姓名:</label>
                <input type="text" name="name"
                    style="display:inline;width:100px;">
                <label style="display:inline;">学号:</label>
                <input type="text" name="num"
                    style="display:inline;width:100px;">
            </div>
            <div id="problems"></div>
            <input type="submit" class="submit-button" id="submit" value="提交"
                    style="margin-left:35%;width:30%;"></input>
        </form>

    </div>
    <script>
        function readTextFile(file, callback) {
            let rawFile = new XMLHttpRequest();
            rawFile.overrideMimeType("application/json");
            rawFile.open("GET", file, true);
            rawFile.onreadystatechange = function () {
                if (rawFile.readyState === 4 && rawFile.status == "200") {
                    callback(rawFile.responseText);
                }
            }
            rawFile.send(null);
        }
        let Problems = document.getElementById("problems")
        readTextFile("Exam.json", function (text) {
            const problems = JSON.parse(text);
            const trans = {
                "single-section": "单项选择",
                "multi-section": "多项选择",
                "judgement": "判断题",
                "blank": "填空题",
                "quiz": "简答题"
            }
            const toChinese = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"]
            for (const T in problems) {
                const prob_type = problems[T]
                Problems.innerHTML += "<h2>" + toChinese[Number(T) + 1] + "、 " + trans[prob_type["type"]] + "</h2>"
                if (prob_type["type"] == "single-section") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p > "
                        for (const j in prob["args"]) {
                            Problems.innerHTML += "<input type='radio' name='" + prob_type["type"] + "_" + i + "' value='" + j + "'>" + prob["args"][j] + "<br>"
                        }
                    }
                } else if (prob_type["type"] == "multi-section") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p > "
                        for (const j in prob["args"]) {
                            Problems.innerHTML += "<input type='checkbox' name='" + prob_type["type"] + "_" + i + "' value='" + j + "'>" + prob["args"][j] + "<br>"
                        }
                    }
                } else if (prob_type["type"] == "judgement") {
                    const TF = ["正确", "错误"]
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        let tmp = "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p> <label>答案: <select style='width:100px;display:inline;height:30px' name='" + prob_type["type"] + "_" + i + "'>"
                        for (const j in TF) {
                            tmp += "<option value='" + j + "'>" + TF[j] + "</option>"
                        }
                        Problems.innerHTML += tmp + "</label></select>"
                    }
                } else if (prob_type["type"] == "blank") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p> "
                        Problems.innerHTML += "<label style='display:inline !important'>答案：</label><input style='display:inline;width:70%' type='text' name='" + prob_type["type"] + "_" + i + "' style='width:95%'>"
                    }
                } else if (prob_type["type"] == "quiz") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p > "
                        Problems.innerHTML += "<label>输入答案</label><textarea rows='9' style='height:auto;width:97%' name='" + prob_type["type"] + "_" + i + "'>"
                    }
                }
            }
        });
    </script>
</body>


/******************* "web\Exam.json" ********************/

[
    {
        "type": "single-section",
        "problems": [
            {
                "text": "中国共产党坚持马克思上义基本原理，坚持实事求是，从中国实际出发，洞察时代大势，把握历中主动，进行艰辛探索，不推进马克思主义中国化时代化，指导人民不断推进伟大社会革命。习近平总书记指出，中国共产党为什么能，由特色社会主义为什么好，归根到底是因为马克思主义行！马克思主义之所以根本原因在于（ ）",
                "args": [
                    "马克思主义具有鲜明的政治立场",
                    "马克思主义具有自觉的历史担当",
                    "马克思主义是科学的世界观和方法论",
                    "马克思主义是无产阶级政党自我革命的武器"
                ]
            },
            {
                "text": "党的十八大以来，我国从中西部22个省份有劳动能力的建档立卡贫困人口中选聘了110.2万名生态护林员，走出了一条生态补偿脱贫的新路子，实现了生态保护和脱贫增收\"双赢\"，充分体现了\"人不负青山，青山定不负人\"的深刻哲理。\"人不负青山，青山定不负人\"表明（ ）",
                "args": [
                    "人与自然是统一的，自然能够自发满足人的要求",
                    "生产力包括自然要素，合理开发自然能促进社会发展",
                    "人是自然的一部分，人的发展只能适应自然的变化",
                    "人能动改造自然，自然能动补人的劳动"
                ]
            },
            {
                "text": "马克思在《资本论》中指出∶\"一个商品占有者出售他现有的商品，而另一个商品占有者却只是作为货币的代表或作为未来货币的代表来购买这种商品。卖者成为债权人，买者成为债务人。由于商品的形态变化或育晶的价值形式的发展在这里起了变化，货币也就取得了另一种职能。\"这里所论述的货币\"另一种职能\"指的是（ ）",
                "args": [
                    "价值尺度",
                    "流通手段",
                    "贮藏手段",
                    "支付手段"
                ]
            },
            {
                "text": "与第二次世界大战前的资本主父相比，当代资本主义在许多方面已经并正在发生着深刻的变化，当代资本主义社会，大公司经营活动的实际控制者是（ ）",
                "args": [
                    "高级职业经理",
                    "股东大会",
                    "监事会",
                    "董事长"
                ]
            },
            {
                "text": "共同富裕是社会主义的本质要求，是中国式现代化的重要特征，党的十九届五中全会对扎实推动共同富裕作出了重大战略部署，明确提出了推进共同富裕的2035年远景目标。这一目标是（ ）",
                "args": [
                    "全体人民共同富裕基本实现",
                    "全体人民共同富裕取得更为明显的实质性进展",
                    "全体人民共同富裕全面实现",
                    "全面发展全体人民共同富裕同步实现"
                ]
            }
        ]
    },
    {
        "type": "multi-section",
        "problems": [
            {
                "text": "在深入推动黄河流域生态保护和高质量发展座谈会上，习近平总书记谈及水资源和发展的关系时，以传统名吃\"羊肉泡馍\"作形象比喻，强调要全方位贯彻\"四水四定\"（以水定城、以水定地、以水定人、以水定产）原则，精打细算用好水资源，\"有多少汤泡多少馍\"，让水资源用在最该用的地方。\"有多少汤泡多少馍\"蕴含的哲学道理是",
                "args": [
                    "创造条件，充分发挥意识能动性",
                    "一切从实际出发，实事求是",
                    "因地制宜，因时制宜",
                    "尊重规律，把握适度原则"
                ]
            },
            {
                "text": "人类历史上的每一次科技革命都与材料的发展息息相关，而新材料的研制却是颇为不易的。人工智能可以借助数据共享，对先进材料的物理化学性质进行预测筛选，从而加快新材料的合成和生产。作为人工智能的一个分支，机器学习算法在辅助新材料设计时尤为\"得力\"，其工作过程主要包括\"描述符\"生成、模型构建和验证、材料预测、实验验证等步骤。人工智能辅助新材料研发的过程表明",
                "args": [
                    "科学研究能够任意改变物质的性质和结构",
                    "人工智能能够取代人类对物质世界的认识",
                    "人类对于物质的认识是一个不断深化的过程",
                    "具体的物质结构和性质的变化并不改变世界的物质性"
                ]
            },
            {
                "text": "时间是万事万物存在的刻度。1秒钟，电影放映24帧画面，猎豹在草原上飞奔28米，蜂鸟振动翅膀55次；1分钟，登山队员攀登珠峰顶峰58.8厘米，\"复兴要\"前进5833米。时间创造无限可能。有人努力奔跑，用力以赴的冲刺突破极限：有人砥砺前行，以日复一日的坚守辛勤耕耘。原木匀速流动的时间，正是在生生不息的奋斗中，在昂扬奋发的进取中，确定意义、体现价值，进而定义生命的精彩、定格历史的脉动。人们在奋斗中\"定义\"时间，说明时间是",
                "args": [
                    "测量事物运动的客观尺度",
                    "物质运动的存在形式",
                    "事物运动的主观联想",
                    "与物质运动不可分割的"
                ]
            }
        ]
    },
    {
        "type": "judgement",
        "problems": [
            {
                "text": "进入社会主义新时代，我国社会的主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。"
            },
            {
                "text": "爱国主义的本质就是坚持爱国和爱党、爱社会主义高度统一。"
            },
            {
                "text": "为了保障经济快速发展，提高人民生活水平，多用些资源也是值得的"
            },
            {
                "text": "建设生态文明，必须严守资源消耗上限、环境质量底线、生态保护红线。"
            },
            {
                "text": "\"和平统一、一国两制\"是解决台湾问题的基本方针，也是实现国家统一的最佳方式;一个中国原则是两岸关系的政治基础。 "
            },
            {
                "text": "现代政治文明的核心是反腐倡廉。"
            },
            {
                "text": "中国特色社会主义文化就是社会主义先进文化。"
            },
            {
                "text": "中国文化领先世界，我们不需要学习他国文化。"
            },
            {
                "text": "提高民族文化认同感，需要正确对待外来文化。"
            },
            {
                "text": "环境问题出现的根本原因是人类经济的发展。"
            }
        ]
    },
    {
        "type": "blank",
        "problems": [
            {
                "text": "土地革命战争是国共两党之间进行的第一次武装战争。从1927年的八一南昌起义开始到________结束。"
            },
            {
                "text": "结束粉碎“四人帮”反革命集团后党和国家工作处于徘徊局面的标志是1978年12月召开的________。"
            },
            {
                "text": "党的十八大以来，以习近平同志为核心的党中央毫不动摇坚持和发展中国特色社会主义，勇于实践、善于创新，深化对共产党执政规律、社会主义建设规律、________规律的认识，形成一系列治国理政新理念新思想新战略，为在新的历史条件下深化改革开放、加快推进社会主义现代化提供了科学理论指导和行动指南。"
            },
            {
                "text": "国民革命失败后，中国共产党建立的第一个农村革命根据地是________革命根据地。"
            },
            {
                "text": "标志着资本主义工商业的社会主义改造已经基本完成是实现了________。"
            }
        ]
    },
    {
        "type": "quiz",
        "problems": [
            {
                "text": "结合材料回答问题：\n材料1\n    进入新时代，我国面临更为严峻的国家安全形势，外部压力前所未有，传统安全威胁和非传统安全威胁相互交织，“黑天鹅”、“灰犀牛”事件时有发生。同形势任务要求相比，我国维护国家安全能力不足，应对各种重大风险能力不强，维护国家安全的统筹协调机制不健全。党中央强调，国泰民安是人民群众最基本、最普遍的愿望。必须坚持底线思维、居安思危、未雨绸缪，坚持国家利益至上，以人民安全为宗旨，以政治安全为根本，以经济安全为基础，以军事、科技、文化、社会安全为保障，以促进国际安全为依托，统筹发展和安全，统筹开放和安全，统筹传统安全和非传统安全，统筹自身安全和共同安全，统筹维护国家安全和塑造国家安全。\n摘自《中共中央关于党的百年奋斗重大成就和历史经验的决议》\n\n材料2\n    “黑天鹅”事件通常指现实生活中出现的“出乎预料”的小概率事件。在特定时间内发生的可能性相对较低的小概率事件，广泛存在于自然、经济、政治等各个领域，具有偶发性、难以预测性等特征。小概率事件虽然发生概率小，但并非零概率事件，若从长时段来看，只要具备相关因素和条件，就可能会发生。小概率事件的影响不局限于一时一地，一旦发生，就可能会形成多米诺骨牌效应，导致系统性风险，给整个人类社会发展带来深远影响。\n习近平总书记在庆祝中国共产党成立100同叶大会上的讲话中指出，新的征程上，我们必须增强忧患意识、始终居安思危，深刻以以我国社会主要矛盾变化带来的新特征新要求，深刻认识错综复杂的国际环境带来的训为盾新挑战，敢于斗争，善于斗争，逢山开道、遇水架桥，勇于战胜一切风险挑战。应对我国发展环境深刻复杂变化，特别是其中隐藏的重大风险挑战，是向着全面建成社会主义现代化强国目标迈进的必然要求，我国发展具有多方面优势和条件，但我国发展不平衡不充分问题仍然突出，重难点领域关键环节改革任务仍然艰巨。发展环境的深刻复杂变化，既要求我们牢中把握机遇发唇自己，又要求我们树立辩证思维，提高驾驭复杂局面、处理复杂问题的本领。\n摘编自《人民日报》(2020年7月27日、2021年7月2日）\n\n运用必然与偶然辩证关系的原理，说明小概率事件并非零概率事件。"
            },
            {
                "text": "结合材料回答问题：\n    在中国共产党成立100周年的重要历史时刻，在党和人民胜利实现第一个百年奋斗目标，全面建成小康社会，正在向着全面建成社会主义现代化强国的第二个百年奋斗目标迈进的重大历史关头，党的十九届六中全会于2021年11月8日至11日在北京胜利举行，审议通过了《中共中央关于党的百年奋斗重大成就和历史经验的决议》。全会聚焦总结党的百年奋斗重大成就和历史经验，深入研究我们党不断推进马克思主义中国化的百年历程，把坚持理论创新” 概括为党百年奋斗的十条历史经验之一，深刻指出党的百年奋斗展示 了马克思主义的强大生命力。\n    “我们党的历史，就是一部不断推进马克思主义中国化的历史，就是一部不断推进理论创新、进行理论创造的历史。一百年来，中国共产党人”顶马克思主义的“天”，立中国国情的“地”，在马克思主义及其中国化创新理论的指引下，团结带领中国人民，书写了中华民族几千年历史上最恢宏的史诗。实践充分证明，党之所以能够领导人民在一次次求索、一次次控诉、一次次开拓中完成中国其他各种政治力量不可能完成的艰巨任务，根本在于坚持解放思想、实事求是、与时俱进、求真务实，坚持把马克思主义基本原理同中国具体实际相结合、同中华优秀传统文化相结合，坚持实践是检验真理的唯一标准，坚持一切从实际出发，及时回答时代之间、人民之间，不断推进马克思主义中国化时代化，用马克思主义中国化的科学理论引领伟大实践。\n    中国特色社会主义进入新时代，中国共产党面临的主要任务是，实现第一个百年奋斗目标，开启实现第二个百年奋斗目标新征程，朝着实现中华民族伟大复兴的宏伟目标继续前进。\n    在这个风云激荡、波澜壮阔的新时代，世情国情党情持续发生深刻复杂变化，向中国共产党人提出一系列新的重大课题。《决议》突出中国特色社会主义新时代这个重点，在党的十九大报告“八个明确”的基础上，用“十个明确”对习近平新时代中国特色社会主义思想的核心内容作了进一步概括和阐述。《决议》还从13个方面分领域总结新时代党领导人民取得的巨大成就，并重点概括了其中的原创性的理念和思想。这些战略思想和创新理念，是党对中国特色社会主义建设规律认识深化和理论创新的重大成果。《决议》指出，习近平新时代中国特色社会主义思想实现了马克思主义中国化新的飞跃。“党确立习近平总书记为党中央的核心，全党的核心地位，确立习近平新时代中国特色社会主义思想的指导地位，反映了全党全军全国各族人民共同心愿，对新时代党和国家事业发展、对推进中华民族伟大复兴历史进程具有决定性意义。”\n摘编自《求是》 (2021年第22期）、《人民日报》(2021年11月16日）\n\n怎样认识我们党的历史“就是一部不断推进理论创新、进行理论创造的历史”? "
            }
        ]
    }
]
/******************* "web\index.html" ********************/

<head>
    <meta charset="UTF-8">
    <title>Document</title>
    <link rel='stylesheet' type='text/css' href='css.css'>
    <style>
        .index {
            background: white;
            margin: 5% auto 0;
            width: 70%;
            height: 70%;
            padding: 5%;
            border-radius: 10px;
            text-align: center;
        }

        a {
            color: black;
            display: inline;
        }
    </style>
</head>

<body>
    <div class="index">
        <h1>在线考试系统</h1>
        <label><a href="exam.html">考试界面</a></label>
        <label><a href="login.html?next=login_save">录入试题</a></label>
        <label><a href="login.html?next=login_grade">成绩查询</a></label>
    </div>
</body>

</html>
/******************* "web\login.html" ********************/

<!DOCTYPE html>
<head>
    <meta charset="UTF-8">
    <title>登录</title>
    <link rel='stylesheet' type='text/css' href='css.css'>
    <style>
        .signup-box {
            display: block;
            border-radius: 10px;
            border: 1px #ddd solid;
            background-color: #fff;
            padding: 20px 26px !important;
            display: block;
            margin-top: 20px;
            width: 350px;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body>
<div class="signup-box">
    <h1>登录</h1>
    <form method="post" id="form">
        <label>用户名</label>
        <input type="text" name="username" style="box-sizing: border-box;height: 30px;">
        <label>密码</label>
        <input type="password" name="password" style="box-sizing: border-box;height: 30px;">
        <input type="submit" class="submit-button">
    </form>
</div>
<script>
    function get(keyword) {
        const reg = new RegExp("(^|&)" + keyword + "=([^&]*)(&|$)", "i")
        const r = window.location.search.substring(1).match(reg)
        if (r != null) return decodeURIComponent(r[2])
        return null
    }
    const uid = get('next');
    let form=document.getElementById("form")
    form.setAttribute("action",uid)
</script>
</body>

/******************* "web\save.html" ********************/

<!DOCTYPE html>

<head>
    <meta charset="UTF-8">
    <title>答案录入</title>
    <link rel='stylesheet' type='text/css' href='css.css'>
    <style>
        .form {
            background: white;
            margin: 5% auto 0;
            width: 70%;
            padding: 5%;
            border-radius: 10px;
        }
    </style>
</head>

<body>
    <div class="form">
        <form id="form" action="save" method="post">
            <div id="problems"></div>
            <input type="submit" class="submit-button"
                style="margin-left:35%;width:30%;">
        </form>
    </div>
    <script>
        function readTextFile(file, callback) {
            var rawFile = new XMLHttpRequest();
            rawFile.overrideMimeType("application/json");
            rawFile.open("GET", file, true);
            rawFile.onreadystatechange = function () {
                if (rawFile.readyState === 4 && rawFile.status == "200") {
                    callback(rawFile.responseText);
                }
            }
            rawFile.send(null);
        }
        let Problems = document.getElementById("problems")
        readTextFile("Exam.json", function (text) {
            const problems = JSON.parse(text);
            const trans = {
                "single-section": "单项选择",
                "multi-section": "多项选择",
                "judgement": "判断题",
                "blank": "填空题",
                "quiz": "简答题"
            }
            const toChinese = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"]
            for (const T in problems) {
                const prob_type = problems[T]
                Problems.innerHTML += "<h2>" + toChinese[Number(T) + 1] + "、 " + trans[prob_type["type"]] + "</h2>"
                if (prob_type["type"] == "single-section") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p > "
                        for (const j in prob["args"]) {
                            Problems.innerHTML += "<input type='radio' name='" + prob_type["type"] + "_" + i + "' value='" + j + "'>" + prob["args"][j] + "<br>"
                        }
                    }
                } else if (prob_type["type"] == "multi-section") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p > "
                        for (const j in prob["args"]) {
                            Problems.innerHTML += "<input type='checkbox' name='" + prob_type["type"] + "_" + i + "' value='" + j + "'>" + prob["args"][j] + "<br>"
                        }
                    }
                } else if (prob_type["type"] == "judgement") {
                    const TF = ["正确", "错误"]
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        let tmp = "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p> <label>答案: <select style='width:100px;display:inline;height:30px' name='" + prob_type["type"] + "_" + i + "'>"
                        for (const j in TF) {
                            tmp += "<option value='" + j + "'>" + TF[j] + "</option>"
                        }
                        Problems.innerHTML += tmp + "</label></select>"
                    }
                } else if (prob_type["type"] == "blank") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p> "
                        Problems.innerHTML += "<label style='display:inline !important'>答案：</label><input style='display:inline;width:70%' type='text' name='" + prob_type["type"] + "_" + i + "' style='width:95%'>"
                    }
                } else if (prob_type["type"] == "quiz") {
                    for (const i in prob_type["problems"]) {
                        let prob = prob_type["problems"][i]
                        Problems.innerHTML += "<p>" + (Number(i) + 1).toString() + ". " + prob["text"].replace(/\n/g, "<br>").replace(/ /g, "&nbsp;") + "</p > "
                        Problems.innerHTML += "<label>输入答案，以\";\"作为关键词分隔符</label><textarea rows='9' style='height:auto;width:97%' name='" + prob_type["type"] + "_" + i + "'>"
                    }
                }
            }
        });
    </script>
</body>

</html>
